generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int          @id @default(autoincrement())
  email             String       @unique
  password          String
  name              String
  phone             String?
  dateOfBirth       DateTime?
  nationality       String?
  gender            Gender?
  stripeCustomerId  String?    
  role              UserRole     @default(CUSTOMER)
  emailVerified     Boolean      @default(false)
  emailVerificationToken String?
  emailVerificationTokenExpiry DateTime?
  passwordResetToken String?
  passwordResetTokenExpiry DateTime?
  passportUrl       String?
  driverLicenseUrl  String?
  proofOfAddressUrl String?
  licenseExpiryDate DateTime?
  ValidationReport Json?
  documentsVerified Boolean      @default(false)
  rentals           Rental[]
  reviews           Review[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  isDeleted         Boolean?      @default(false)
  deletedAt         DateTime?
  RefreshToken      RefreshToken[]
@@index([role])
@@index([emailVerificationToken])
@@index([passwordResetToken])

}


model RefreshToken{
  id Int @id @default(autoincrement())
  token String @unique
  userId Int
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  expiryDate DateTime
  @@index([userId])
  @@index([token])
}



enum UserRole {
  CUSTOMER
  ADMIN
  STAFF
}

enum Gender {
  MALE
  FEMALE
  
}

model Car {
  id             Int          @id @default(autoincrement())
  make           String
  model          String
  year           Int
  licensePlate   String       @unique
  fuelType       FuelType
  transmission   TransmissionType
  seats          Int
  imagesUrl       String[]
  featuredImage      String?
  available      Boolean      @default(true)

  location       Location     @relation(fields: [locationId], references: [id])
  locationId     Int

  category       CarCategory  @relation(fields: [categoryId], references: [id])
  categoryId     Int

  rentals        Rental[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isDeleted      Boolean      @default(false)
  deletedAt      DateTime?

  Review Review[]
@@index([available])
@@index([make])
@@index([model])
@@index([locationId])
@@index([categoryId])

}
model CarLocation {
  id        Int       @id @default(autoincrement())
  rental    Rental    @relation(fields: [rentalId], references: [id], onDelete: Cascade)
  rentalId  Int
  lat       Float
  lng       Float
  timestamp DateTime  @default(now())

  @@index([rentalId])
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID
}

enum TransmissionType {
  MANUAL
  AUTOMATIC
}

model CarCategory {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  dailyRate Float
  cars      Car[] 
}

model Location {
  id       Int     @id @default(autoincrement())
  city     String
  address  String
  country  String
  googleMapsUrl String?
  cars     Car[]
  rentals  Rental[]
  @@index([city])
@@index([country])

}

model Rental {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int

  car            Car          @relation(fields: [carId], references: [id])
  carId          Int

  startDate      DateTime
  endDate        DateTime
  pickupTime     String
  returnTime     String
  totalCost      Float
 signedAt           DateTime? 
 paidAt             DateTime?
  cancelledAt         DateTime?
  cancellationReason  String?
  status         RentalStatus  @default(PENDING)
  payment        Payment?
  rentalContract RentalContract?

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  Location Location[]
 @@index([userId])
@@index([carId])
@@index([status])
@@index([startDate])
@@index([endDate])

  CarLocation CarLocation[]
}

enum RentalStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Payment {
  id              Int       @id @default(autoincrement())
  rental          Rental    @relation(fields: [rentalId], references: [id] ,onDelete: Cascade)
  rentalId        Int       @unique

  amount          Float
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  paidAt          DateTime?

  stripePaymentIntentId String? 
  @@index([status])
@@index([method])

}

enum PaymentMethod {
  STRIPE
  CASH
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int      @default(5)
  comment   String?
  car       Car      @relation(fields: [carId], references: [id])
  carId     Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  @@index([carId])
@@index([userId])

}

model RentalContract {
  id           Int      @id @default(autoincrement())
  rental       Rental   @relation(fields: [rentalId], references: [id] ,onDelete: Cascade)
  rentalId     Int      @unique

  contractUrl  String  
  contractConditionsAccept Boolean @default(false)
  signingToken String?  @unique
  signingTokenExpiry DateTime?
  signerEmail  String?
  signerName   String?
  agreementAccepted Boolean @default(false)
  signedAt     DateTime?
  isSigned     Boolean @default(false)

  uploadedAt   DateTime @default(now())
  verified     Boolean  @default(false)
  verifiedAt   DateTime?
  verifiedBy   Int?    
}
